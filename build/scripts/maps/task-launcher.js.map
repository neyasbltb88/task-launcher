{"version":3,"names":[],"mappings":"","sources":["task-launcher.js"],"sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = \"./app/scripts/task-launcher.js\");\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ \"./app/scripts/task-launcher.js\":\n/*!**************************************!*\\\n  !*** ./app/scripts/task-launcher.js ***!\n  \\**************************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"default\\\", function() { return Launcher; });\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nvar Launcher =\\n/*#__PURE__*/\\nfunction () {\\n  /*  tasks = {\\r\\n   *       condition:  @Function: должна проверять условие, необходимое для вызова callback и возвращать boolean.\\r\\n   *       callback:   @Function: вызовется когда condition вернет true.\\r\\n   *       name:       @String: Имя таска для более удобного управления им. Необязательный.\\r\\n   *       arg:        @Any: один аргумент, который передастся в callback при его вызове. Необязательный.\\r\\n   *                   @Function: если передана функция, то все, что она вернет, будет передано в callback при его вызове.\\r\\n   *       attempts:   @Number: количество попыток для проверки условия. Необязательный.\\r\\n   *                   Если не передан, проверка будет бесконечной, пока condition не вернет true или не будет вызван метод остановки .stop()\\r\\n   *       run:        @Boolean: если true, то запуск таска произойдет автоматически, без вызова .run(). Необязательный.\\r\\n   *   } */\\n  function Launcher() {\\n    var _this = this;\\n\\n    var _tasks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\\n\\n    _classCallCheck(this, Launcher);\\n\\n    _defineProperty(this, \\\"running\\\", false);\\n\\n    _defineProperty(this, \\\"rafId\\\", 0);\\n\\n    _defineProperty(this, \\\"tasks\\\", []);\\n\\n    _defineProperty(this, \\\"add\\\", function (tasks) {\\n      var newTasks = [];\\n      var added = false;\\n\\n      if (tasks instanceof Array) {\\n        added = [];\\n        newTasks = tasks;\\n      } else if (tasks instanceof Object) {\\n        newTasks.push(tasks);\\n      }\\n\\n      newTasks.forEach(function (task) {\\n        // Валидация таска\\n        if (!task.condition || typeof task.condition !== 'function') {\\n          console.warn('Laucher: не передано условие', task);\\n          return;\\n        }\\n\\n        if (!task.callback || typeof task.callback !== 'function') {\\n          console.warn('Laucher: не передан коллбек', task);\\n          return;\\n        } // Подготовка таска\\n\\n\\n        task.attempts = tasks.attempts || Infinity;\\n        task.tryNum = 0;\\n        task.run = task.run || false; // Добавление в общий массив тасков\\n\\n        _this.tasks.push(task);\\n\\n        var addedIndex = _this.tasks.length - 1;\\n\\n        if (added instanceof Array) {\\n          added.push(addedIndex);\\n        } else {\\n          added = addedIndex;\\n        }\\n      }); // Попытка запуска тасков после добавления\\n\\n      _this._launch();\\n\\n      return added;\\n    });\\n\\n    _defineProperty(this, \\\"hasActive\\\", function () {\\n      return _this.tasks.some(function (task) {\\n        return task.run;\\n      });\\n    });\\n\\n    _defineProperty(this, \\\"_launch\\\", function (rafId) {\\n      // Если не рекурсивный запуск и уже запущен процесс проверки тасков, или нет активных, то выходим\\n      if (_this.rafId !== rafId && (_this.running || !_this.hasActive())) return;\\n      _this.running = true;\\n\\n      _this.tasks.forEach(function (task, index) {\\n        // Если таск не активный, то выходим\\n        if (!task.run) return; // Если функция условия таска вернула true, отключаем дальнейшее выполнение таска и выззываем callback\\n\\n        if (task.condition.call(_this)) {\\n          _this.stop(index);\\n\\n          task.callback.call(_this, typeof task.arg === 'function' ? task.arg.call(_this) : task.arg); // Если функция условия вернула false и количество попыток исчерпано, тормозим таск\\n        } else if (!task.condition.call(_this)) {\\n          task.tryNum++;\\n          if (task.tryNum >= task.attempts) _this.stop(index);\\n        }\\n      }); // После цикла по таскам проверяем остались ли активные таски\\n      // Если активные таски есть, планируем следующий запуск _launch\\n\\n\\n      if (_this.hasActive()) {\\n        _this.rafId = requestAnimationFrame(function () {\\n          return _this._launch(_this.rafId);\\n        }); // Если таски все завершены, то переходим в глобальное состояние остановки\\n      } else {\\n        _this.stop();\\n      }\\n    });\\n\\n    _defineProperty(this, \\\"_runTask\\\", function (taskId, arg) {\\n      var index = _this._findTask(taskId);\\n\\n      if (index === false) return false; // Если нет аргумениа и таск уже запущен, возвращаем false\\n\\n      if (!arg && _this.tasks[index].run) return false; // Запускаем таск\\n\\n      _this.tasks[index].run = true; // Если есть аргумент, обновим его в таске\\n\\n      if (arg) _this.tasks[index].arg = arg;\\n      return index;\\n    });\\n\\n    _defineProperty(this, \\\"run\\\", function () {\\n      var runs; // Если аргументов нет, то запуск всех тасков\\n\\n      if (arguments.length === 0) {\\n        runs = [];\\n\\n        _this.tasks.forEach(function (task, index) {\\n          if (task.run === false) {\\n            runs.push(index);\\n            task.run = true;\\n          }\\n        }); // Если аргумент один, то это индекс или имя таска\\n\\n      } else if (arguments.length === 1) {\\n        runs = _this._runTask(arguments.length <= 0 ? undefined : arguments[0]); // Если аргумента два, то в первом индекс/имя таска, а во втором обновление для task.arg\\n      } else if (arguments.length === 2) {\\n        runs = _this._runTask(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);\\n      } // Запуск выполнения проверки активных тасков\\n\\n\\n      _this._launch();\\n\\n      return runs;\\n    });\\n\\n    _defineProperty(this, \\\"stop\\\", function (taskId) {\\n      var stoped;\\n\\n      if (taskId !== undefined) {\\n        var index = _this._stopTask(taskId);\\n\\n        if (index === false) return false;\\n        stoped = index;\\n      } else {\\n        stoped = [];\\n\\n        _this.tasks.forEach(function (task, idx) {\\n          var index = _this._stopTask(idx);\\n\\n          if (index === false) return false;\\n          stoped.push(index);\\n        });\\n\\n        _this.running = false;\\n        cancelAnimationFrame(_this.rafId);\\n        _this.rafId = 0;\\n      }\\n\\n      return stoped;\\n    });\\n\\n    _defineProperty(this, \\\"remove\\\", function (taskId) {\\n      var removed;\\n\\n      if (taskId !== undefined) {\\n        var index = _this._removeTask(taskId);\\n\\n        if (index === false) return false;\\n        removed = index;\\n      } else {\\n        removed = [];\\n\\n        _this.tasks.forEach(function (task, idx) {\\n          removed.push(idx);\\n        });\\n\\n        _this.tasks = [];\\n      }\\n\\n      return removed;\\n    });\\n\\n    this.add(_tasks);\\n  }\\n\\n  _createClass(Launcher, [{\\n    key: \\\"_findTask\\\",\\n    value: function _findTask(taskId) {\\n      var index; // Если число - то это индекс, и если под индексом есть таск\\n\\n      if (typeof taskId === 'number' && this.tasks[taskId]) {\\n        index = taskId; // Если строка, то это имя\\n      } else if (typeof taskId === 'string') {\\n        this.tasks.forEach(function (task, ind) {\\n          if (task.name === taskId) index = ind;\\n        });\\n        index = index === undefined ? false : index;\\n      } else {\\n        return false;\\n      }\\n\\n      return index;\\n    }\\n  }, {\\n    key: \\\"_stopTask\\\",\\n    value: function _stopTask(taskId) {\\n      var index = this._findTask(taskId);\\n\\n      if (index === false) return false;\\n      if (!this.tasks[index].run) return false;\\n      this.tasks[index].run = false;\\n      this.tasks[index].tryNum = 0;\\n      return index;\\n    } // Остановка рекурсивной проверки условия\\n\\n  }, {\\n    key: \\\"_removeTask\\\",\\n    value: function _removeTask(taskId) {\\n      var index = this._findTask(taskId);\\n\\n      if (index === false) return false;\\n      this.tasks.splice(index, 1);\\n      return index;\\n    }\\n  }]);\\n\\n  return Launcher;\\n}();\\n\\n\\nwindow.Launcher = Launcher;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./app/scripts/task-launcher.js\\n\");\n\n/***/ })\n\n/******/ });"],"file":"../task-launcher.js"}